name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['backend/**']
  pull_request:
    branches: [main]
    paths: ['backend/**']

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: my-dockerhub/ecommerce-backend

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' 
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v4.0.0
        with:
          working-directory: backend
          version: latest
          args: --timeout=10m --out-format=json:golangci-report.json,colored-line-number

      - name: Run Go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run Go vet
        run: go vet ./...

      - name: Run tests with coverage
        env:
          CGO_ENABLED: 1  
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Generate test report
        if: always()
        run: |
          go install github.com/jstemmer/go-junit-report/v2@latest
          go test -v ./... 2>&1 | go-junit-report -set-exit-code > junit-report.xml

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/coverage.out
            backend/coverage.html
            backend/junit-report.xml
            backend/golangci-report.json
          retention-days: 5

  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Run Gosec security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt json -out gosec-report.json -stdout -verbose=text ./...'
          working-directory: backend

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy for dependency vulnerabilities
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: backend/gosec-report.json
          retention-days: 5

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.actor != 'dependabot[bot]'
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: backend/go.sum

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: backend/

      - name: Download security artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: backend/

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}
        with:
          projectBaseDir: backend
          args: |
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY_BACKEND }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.exclusions=**/vendor/**,**/testdata/**,**/*.pb.go,**/mock_*.go
            -Dsonar.go.coverage.reportPaths=coverage.out

  build-and-deploy:
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            CGO_ENABLED=0
            GOOS=linux

  deploy-to-eks:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ vars.AWS_REGION }} \
            --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Verify kubectl connection
        run: kubectl get nodes

      - name: Update deployment image
        run: |
          IMAGE_TAG="${{ github.sha }}"
          IMAGE_FULL="${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${IMAGE_TAG:0:7}"
          
          kubectl set image deployment/ecommerce-backend \
            ecommerce-backend=$IMAGE_FULL \
            --namespace=default

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/ecommerce-backend \
            --namespace=default \
            --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -l app=ecommerce-backend --namespace=default
          kubectl get service ecommerce-backend --namespace=default